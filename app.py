
import streamlit as st
import pandas as pd
import io
from modules.forecast import run_forecast_simulation, run_target_stock_sim

def export_three_sheets(df_standard, df_target):
    output = io.BytesIO()

    df_comp = df_standard.copy()
    df_target_renamed = df_target.copy()

    df_comp = df_comp.rename(columns={
        "Fournisseur": "Fournisseur (standard)",
        "Stock": "Stock (standard)",
        "Conditionnement": "Conditionnement (standard)",
        "Tarif d‚Äôachat": "Tarif d‚Äôachat (standard)",
        "Quantit√© mini": "Quantit√© mini (standard)",
        "Valeur stock actuel": "Valeur stock actuel (standard)",
        "Quantit√© command√©e": "Quantit√© command√©e (standard)",
        "Valeur ajout√©e": "Valeur ajout√©e (standard)",
        "Valeur totale": "Valeur totale (standard)"
    })

    df_target_renamed = df_target_renamed.rename(columns={
        "Quantit√© command√©e": "Quantit√© command√©e (objectif)",
        "Valeur ajout√©e": "Valeur ajout√©e (objectif)",
        "Valeur totale": "Valeur totale (objectif)",
        "Stock total apr√®s commande": "Stock total apr√®s commande (objectif)"
    })

    df_comparatif = pd.merge(
        df_comp,
        df_target_renamed[[
            "Produit", "D√©signation",
            "Quantit√© command√©e (objectif)",
            "Valeur ajout√©e (objectif)",
            "Valeur totale (objectif)",
            "Stock total apr√®s commande (objectif)"
        ]],
        on=["Produit", "D√©signation"],
        how="outer"
    )

    export_columns = [
        "Produit", "D√©signation", "Fournisseur (standard)", "Stock (standard)", "Conditionnement (standard)",
        "Tarif d‚Äôachat (standard)", "Quantit√© mini (standard)", "Valeur stock actuel (standard)",
        "Quantit√© command√©e (standard)", "Valeur ajout√©e (standard)", "Valeur totale (standard)",
        "Quantit√© command√©e (objectif)", "Valeur ajout√©e (objectif)", "Valeur totale (objectif)",
        "Stock total apr√®s commande (objectif)"
    ]

    df_comparatif = df_comparatif[[col for col in export_columns if col in df_comparatif.columns]]

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_standard.to_excel(writer, sheet_name="Simulation standard", index=False)
        df_target.to_excel(writer, sheet_name="Simulation objectif", index=False)
        df_comparatif.to_excel(writer, sheet_name="Comparatif", index=False)

    return output

st.set_page_config(layout="wide", page_title="Forecast Hebdo")
st.title("Pr√©vision des commandes hebdomadaires")

uploaded_file = st.file_uploader("Charger un fichier Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    st.subheader("Donn√©es charg√©es")
    st.dataframe(df)

    st.subheader("Simulation standard")
    df_forecast = run_forecast_simulation(df)
    st.dataframe(df_forecast)

    st.subheader("Simulation par objectif de valeur de stock")
    objectif = st.number_input("Objectif de stock global (‚Ç¨)", min_value=0, step=100)

    if st.button("Lancer simulation cible"):
        df_cible = run_target_stock_sim(df, objectif)
        st.session_state["df_cible"] = df_cible
        st.session_state["df_standard"] = df_forecast
        st.success(f"Simulation termin√©e avec objectif de {objectif:,.2f} ‚Ç¨")

    if "df_cible" in st.session_state and "df_standard" in st.session_state:
        df_cible = st.session_state["df_cible"]
        df_forecast = st.session_state["df_standard"]

        st.subheader("R√©sultat simulation avec objectif")
        st.dataframe(df_cible)

        if st.button("üì§ Exporter les 3 onglets Excel"):
            export_excel = export_three_sheets(df_forecast, df_cible)
            st.download_button(
                label="üìÑ T√©l√©charger les 3 simulations (XLSX)",
                data=export_excel.getvalue(),
                file_name="export_forecast_complet.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("Veuillez charger un fichier Excel pour d√©marrer.")
