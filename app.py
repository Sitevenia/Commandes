import streamlit as st
import pandas as pd
import numpy as np
import io

def calculer_quantite_a_commander(df, semaine_columns, montant_minimum, duree_semaines):
    """Calcule la quantit√© √† commander en fonction des crit√®res donn√©s."""
    # Calculer la moyenne des ventes sur la totalit√© des colonnes (Ventes N-1)
    ventes_N1 = df[semaine_columns].sum(axis=1)

    # Calculer la moyenne des 12 derni√®res semaines
    ventes_12_dernieres_semaines = df[semaine_columns[-12:]].sum(axis=1)

    # Calculer la moyenne des 12 semaines identiques en N-1
    ventes_12_semaines_N1 = df[semaine_columns[-64:-52]].sum(axis=1)

    # Calculer la moyenne des 12 semaines suivantes en N-1
    ventes_12_semaines_N1_suivantes = df[semaine_columns[-52:-40]].sum(axis=1)

    # Appliquer la pond√©ration
    quantite_ponderee = 0.5 * (ventes_12_dernieres_semaines / 12) + 0.2 * (ventes_12_semaines_N1 / 12) + 0.3 * (ventes_12_semaines_N1_suivantes / 12)

    # Calculer la quantit√© n√©cessaire pour couvrir les ventes pendant la dur√©e sp√©cifi√©e
    quantite_necessaire = quantite_ponderee * duree_semaines

    # Calculer la quantit√© √† commander
    quantite_a_commander = quantite_necessaire - df["Stock"]
    quantite_a_commander = quantite_a_commander.apply(lambda x: max(0, x))  # Ne pas commander des quantit√©s n√©gatives

    # Ajuster les quantit√©s √† commander pour qu'elles soient des multiples entiers des conditionnements
    conditionnement = df["Conditionnement"]
    quantite_a_commander = [int(np.ceil(q / cond) * cond) if q > 0 else 0 for q, cond in zip(quantite_a_commander, conditionnement)]

    # V√©rifier si un produit est vendu au moins deux fois sur les 12 derni√®res semaines et si le stock est inf√©rieur ou √©gal √† 1
    for i in range(len(quantite_a_commander)):
        ventes_recentes = df[semaine_columns[-12:]].iloc[i]
        if (ventes_recentes > 0).sum() >= 2 and df["Stock"].iloc[i] <= 1:
            quantite_a_commander[i] = max(quantite_a_commander[i], conditionnement[i])

    # V√©rifier si les quantit√©s vendues en N-1 sont inf√©rieures √† 6 et si les ventes des 12 derni√®res semaines sont inf√©rieures √† 2
    for i in range(len(quantite_a_commander)):
        if ventes_N1.iloc[i] < 6 and ventes_12_dernieres_semaines.iloc[i] < 2:
            quantite_a_commander[i] = 0

    # Calculer le montant total initial
    montant_total_initial = (df["Tarif d'achat"] * quantite_a_commander).sum()

    # Si le montant minimum est sup√©rieur au montant calcul√©, ajuster les quantit√©s
    if montant_minimum > 0 and montant_total_initial < montant_minimum:
        while montant_total_initial < montant_minimum:
            for i in range(len(quantite_a_commander)):
                if quantite_a_commander[i] > 0:  # Augmenter seulement si une quantit√© est d√©j√† command√©e
                    quantite_a_commander[i] += conditionnement[i]
                    montant_total_initial = (df["Tarif d'achat"] * quantite_a_commander).sum()
                    if montant_total_initial >= montant_minimum:
                        break

    return quantite_a_commander, ventes_N1, ventes_12_semaines_N1, ventes_12_dernieres_semaines, montant_total_initial

def generer_rapport_excel(df, montant_total):
    """G√©n√®re un rapport Excel avec les quantit√©s √† commander."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        # √âcrire les quantit√©s √† commander
        df_with_total = pd.concat([df, pd.DataFrame([["Total", "", "", "", "", "", "", montant_total]], columns=df.columns + ["Total"])], ignore_index=True)
        df_with_total.to_excel(writer, sheet_name="Quantit√©s_√†_commander", index=False)
    output.seek(0)
    return output

st.set_page_config(page_title="Forecast App", layout="wide")
st.title("üì¶ Application de Pr√©vision des Commandes")

# Chargement du fichier principal
uploaded_file = st.file_uploader("üìÅ Charger le fichier Excel principal", type=["xlsx"])

if uploaded_file:
    try:
        # Lire le fichier Excel en utilisant la ligne 8 comme en-t√™te
        df = pd.read_excel(uploaded_file, sheet_name="Tableau final", header=7)
        st.success("‚úÖ Fichier principal charg√© avec succ√®s.")

        # Lire l'onglet "Minimum de commande"
        df_fournisseurs = pd.read_excel(uploaded_file, sheet_name="Minimum de commande")

        # V√©rifier les colonnes disponibles
        st.write("Colonnes disponibles dans 'Tableau final':", df.columns)
        st.write("Colonnes disponibles dans 'Minimum de commande':", df_fournisseurs.columns)

        # Utiliser la colonne 13 comme point de d√©part
        start_index = 13  # Colonne "N"

        # S√©lectionner toutes les colonnes num√©riques √† partir de la colonne 13
        semaine_columns = df.columns[start_index:].tolist()
        numeric_columns = df[semaine_columns].select_dtypes(include=[np.number]).columns.tolist()

        exclude_columns = ["Tarif d'achat", "Conditionnement", "Stock"]
        semaine_columns = [col for col in numeric_columns if col not in exclude_columns]

        for col in semaine_columns + exclude_columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

        # Interface pour saisir la dur√©e en semaines
        duree_semaines = st.number_input("Dur√©e en semaines pour la commande", value=3, min_value=1, step=1)

        # Interface pour saisir le montant minimum de commande
        montant_minimum = st.number_input("Montant minimum de commande (‚Ç¨)", value=0.0, step=100.0)

        # Calculer la quantit√© √† commander et les autres valeurs
        df["Quantit√© √† commander"], df["Ventes N-1"], df["Ventes 12 semaines identiques N-1"], df["Ventes 12 derni√®res semaines"], montant_total = \
            calculer_quantite_a_commander(df, semaine_columns, montant_minimum, duree_semaines)

        # Ajouter la colonne "Tarif d'achat"
        df["Tarif d'achat"] = df["Tarif d'achat"]

        # Calculer la colonne "Total"
        df["Total"] = df["Tarif d'achat"] * df["Quantit√© √† commander"]

        # Calculer la colonne "Stock √† terme"
        df["Stock √† terme"] = df["Stock"] + df["Quantit√© √† commander"]

        # V√©rifier si les colonnes n√©cessaires existent
        required_columns = ["AF_RefFourniss", "R√©f√©rence Article", "D√©signation Article", "Stock"]
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            st.error(f"‚ùå Colonnes manquantes dans le fichier : {missing_columns}")
        else:
            # Organiser l'ordre des colonnes pour l'affichage
            display_columns = required_columns + ["Ventes N-1", "Ventes 12 semaines identiques N-1", "Ventes 12 derni√®res semaines", "Conditionnement", "Quantit√© √† commander", "Stock √† terme", "Tarif d'achat", "Total"]

            # Afficher le montant total de la commande
            st.metric(label="Montant total de la commande", value=f"{montant_total:.2f} ‚Ç¨")

            # Afficher les alertes pour les minimums de commande
            alertes = []
            for index, row in df_fournisseurs.iterrows():
                montant_commande = df[df["AF_RefFourniss"] == row["AF_RefFourniss"]]["Total"].sum()
                if montant_commande < row["Montant minimum de commande"]:
                    alertes.append({
                        "Fournisseur": row["Fournisseur"],
                        "Montant minimum": row["Montant minimum de commande"],
                        "Montant command√©": montant_commande,
                        "Montant manquant": row["Montant minimum de commande"] - montant_commande
                    })

            if alertes:
                st.error("üö® Alertes de minimum de commande :")
                for alerte in alertes:
                    st.write(f"**Fournisseur :** {alerte['Fournisseur']}")
                    st.write(f"**Montant minimum de commande :** {alerte['Montant minimum']} ‚Ç¨")
                    st.write(f"**Montant command√© :** {alerte['Montant command√©']} ‚Ç¨")
                    st.write(f"**Montant manquant :** {alerte['Montant manquant']} ‚Ç¨")
                    st.write("---")

            st.subheader("Quantit√©s √† commander pour les prochaines semaines")
            st.dataframe(df[display_columns])

            # G√©n√©rer le rapport Excel
            output = generer_rapport_excel(df[display_columns], montant_total)

            # Export des quantit√©s √† commander
            st.download_button("üì• T√©l√©charger Quantit√©s √† commander", output, file_name="quantites_a_commander.xlsx")

    except Exception as e:
        st.error(f"‚ùå Erreur : {e}")
else:
    st.info("Veuillez charger le fichier principal pour commencer.")
