import streamlit as st
import pandas as pd
import numpy as np
import io

def calculer_quantite_a_commander(df, semaine_columns):
    """Calcule la quantit√© √† commander en fonction des crit√®res donn√©s."""
    # Calculer la moyenne des ventes sur la totalit√© des colonnes
    moyenne_totale = df[semaine_columns].mean(axis=1)

    # Calculer la moyenne des 12 derni√®res semaines
    moyenne_12_dernieres_semaines = df[semaine_columns[-12:]].mean(axis=1)

    # Calculer la moyenne des 12 semaines identiques en N-1
    moyenne_12_semaines_N1 = df[semaine_columns[:12]].mean(axis=1)

    # Appliquer la pond√©ration
    quantite_ponderee = 0.7 * moyenne_12_dernieres_semaines + 0.3 * moyenne_12_semaines_N1

    # Calculer la quantit√© √† commander pour les 3 prochaines semaines
    quantite_a_commander = (quantite_ponderee * 3) - df["Stock"]
    quantite_a_commander = quantite_a_commander.apply(lambda x: max(0, x))  # Ne pas commander des quantit√©s n√©gatives

    return quantite_a_commander

st.set_page_config(page_title="Forecast App", layout="wide")
st.title("üì¶ Application de Pr√©vision des Commandes")

# Chargement du fichier principal
uploaded_file = st.file_uploader("üìÅ Charger le fichier Excel principal", type=["xlsx"])

if uploaded_file:
    try:
        # Lire le fichier Excel en utilisant la ligne 8 comme en-t√™te
        df = pd.read_excel(uploaded_file, sheet_name="Tableau final", header=7)
        st.success("‚úÖ Fichier principal charg√© avec succ√®s.")

        # Utiliser la 9√®me colonne comme point de d√©part
        start_index = 8  # Index 8 car les index commencent √† 0
        semaine_columns = df.columns[start_index:].tolist()

        # S√©lectionner toutes les colonnes num√©riques √† partir de la 9√®me colonne
        numeric_columns = df[semaine_columns].select_dtypes(include=[np.number]).columns.tolist()

        exclude_columns = ["Tarif d'achat", "Conditionnement", "Stock"]
        semaine_columns = [col for col in numeric_columns if col not in exclude_columns]

        for col in semaine_columns + exclude_columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

        # Calculer la quantit√© √† commander
        df["Quantit√© √† commander"] = calculer_quantite_a_commander(df, semaine_columns)

        st.subheader("Quantit√©s √† commander pour les 3 prochaines semaines")
        st.dataframe(df[["R√©f√©rence fournisseur", "R√©f√©rence produit", "D√©signation", "Quantit√© √† commander"]])

        # Export des quantit√©s √† commander
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            df[["R√©f√©rence fournisseur", "R√©f√©rence produit", "D√©signation", "Quantit√© √† commander"]].to_excel(writer, sheet_name="Quantit√©s_√†_commander", index=False)
        output.seek(0)
        st.download_button("üì• T√©l√©charger Quantit√©s √† commander", output, file_name="quantites_a_commander.xlsx")

    except Exception as e:
        st.error(f"‚ùå Erreur : {e}")
else:
    st.info("Veuillez charger le fichier principal pour commencer.")
